name: 'Setup Moon Build System'
description: 'Install Moon and Proto with caching for SuperConfig monorepo'

inputs:
  moon-version:
    description: 'Moon version to install'
    required: false
    default: '1.39.3'
  proto-version:
    description: 'Proto version to install'
    required: false
    default: '0.51.4'
  crate-name:
    description: 'Name of the crate for targeted caching'
    required: false
    default: ''
  fail-on-cache-miss:
    description: 'Fail if target cache is not found'
    required: false
    default: 'false'

outputs:
  cache-hit:
    description: 'Whether tools were loaded from cache'
    value: ${{ steps.tools-cache.outputs.cache-hit }}
  target-cache-hit:
    description: 'Whether target directory was loaded from cache'
    value: ${{ steps.target-cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Generate cache key
      id: cache-key
      shell: bash
      run: echo "key=moon-tools-${{ runner.os }}-${{ inputs.moon-version }}-${{ inputs.proto-version }}-${{ hashFiles('.prototools') }}" >> $GITHUB_OUTPUT

    - name: Cache Moon and Proto tools
      uses: actions/cache@v4
      id: tools-cache
      with:
        path: |
          ~/.proto
          ~/.moon
        key: ${{ steps.cache-key.outputs.key }}

    - name: Install Proto
      if: steps.tools-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -fsSL https://moonrepo.dev/install/proto.sh | bash -s -- --version ${{ inputs.proto-version }}
        echo "$HOME/.proto/bin" >> $GITHUB_PATH

    - name: Install Moon
      if: steps.tools-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Need to source proto in current shell for installation
        export PATH="$HOME/.proto/bin:$PATH"
        proto install moon ${{ inputs.moon-version }}

    - name: Setup PATH for cached tools
      if: steps.tools-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "$HOME/.proto/bin" >> $GITHUB_PATH

    - name: Install Rust toolchain from .prototools
      shell: bash
      run: |
        export PATH="$HOME/.proto/bin:$PATH"
        proto install rust
        proto use rust
        # Ensure core components are available
        ACTIVE_TOOLCHAIN=$(rustup show active-toolchain | cut -d' ' -f1)
        echo "Active toolchain: $ACTIVE_TOOLCHAIN"
        # Add essential components and target if not already available
        if ! rustc --version 2>/dev/null; then
          echo "Adding rustc component to toolchain: $ACTIVE_TOOLCHAIN"
          rustup component add --toolchain "$ACTIVE_TOOLCHAIN" rustc
        fi
        if ! cargo --version 2>/dev/null; then
          echo "Adding cargo component to toolchain: $ACTIVE_TOOLCHAIN"
          rustup component add --toolchain "$ACTIVE_TOOLCHAIN" cargo
        fi
        # Ensure target is installed
        echo "Adding x86_64-unknown-linux-gnu target to toolchain: $ACTIVE_TOOLCHAIN"
        rustup target add --toolchain "$ACTIVE_TOOLCHAIN" x86_64-unknown-linux-gnu

    - name: Cache Cargo registry and git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-${{ runner.os }}-${{ hashFiles('.prototools') }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache Rust target directory (restore)
      if: inputs.crate-name != ''
      uses: actions/cache/restore@v4
      id: target-cache
      with:
        path: crates/${{ inputs.crate-name }}/target/
        key: cargo-target-${{ inputs.crate-name }}-${{ runner.os }}-${{ hashFiles('.prototools') }}-${{ hashFiles('crates/${{ inputs.crate-name }}/Cargo.lock', 'crates/${{ inputs.crate-name }}/Cargo.toml') }}

    - name: Fail on cache miss
      if: inputs.crate-name != '' && inputs.fail-on-cache-miss == 'true' && steps.target-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Build artifacts not found for ${{ inputs.crate-name }} - build job must complete first"
        exit 1

    - name: Cache Moon workspace outputs
      uses: actions/cache@v4  
      with:
        path: .moon/cache
        key: moon-workspace-${{ runner.os }}-${{ hashFiles('.prototools') }}-${{ hashFiles('Cargo.lock', '**/Cargo.toml') }}

    - name: Cache Cargo tools
      uses: actions/cache@v4
      id: cargo-tools-cache
      with:
        path: ~/.cargo/bin
        key: cargo-tools-${{ runner.os }}-${{ hashFiles('.prototools') }}-v2

    - name: Install Rust tools and utilities
      if: steps.cargo-tools-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        export PATH="$HOME/.proto/bin:$PATH"
        cargo install cargo-audit
        cargo install cargo-deny
        cargo install cargo-outdated
        cargo install cargo-llvm-cov
        cargo install cargo-tarpaulin

    - name: Verify Moon installation
      shell: bash
      run: |
        export PATH="$HOME/.proto/bin:$PATH"
        moon --version
        proto --version
        cargo --version
        cargo audit --version
        cargo deny --version
        cargo outdated --version
        cargo llvm-cov --version
        cargo tarpaulin --version
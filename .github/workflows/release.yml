name: Release

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        default: 'superconfig'
        type: choice
        options:
          - superconfig
      version_level:
        description: 'Version bump level'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: true
        type: boolean
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package-info.outputs.package_name }}
      current_version: ${{ steps.package-info.outputs.current_version }}
      new_version: ${{ steps.version-bump.outputs.new_version }}
      should_release: ${{ steps.version-check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get package information
        id: package-info
        run: |
          PACKAGE_PATH="crates/${{ github.event.inputs.package }}"
          CURRENT_VERSION=$(grep "^version = " "${PACKAGE_PATH}/Cargo.toml" | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "package_name=${{ github.event.inputs.package }}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${CURRENT_VERSION}"

      - name: Calculate new version
        id: version-bump
        run: |
          CURRENT="${{ steps.package-info.outputs.current_version }}"
          LEVEL="${{ github.event.inputs.version_level }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          
          case "$LEVEL" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
            prerelease)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-rc.$(date +%Y%m%d%H%M%S)"
              ;;
            *)
              echo "Invalid version level: $LEVEL"
              exit 1
              ;;
          esac
          
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Check if version exists
        id: version-check
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          NEW_VERSION="${{ steps.version-bump.outputs.new_version }}"
          
          # Check if version exists on crates.io
          if cargo search "${PACKAGE_NAME}" --limit 1 | grep -q "${NEW_VERSION}"; then
            echo "Version ${NEW_VERSION} already exists on crates.io"
            if [ "${{ github.event.inputs.force_publish }}" != "true" ]; then
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Use force_publish=true to override"
              exit 1
            else
              echo "Forcing publish despite existing version"
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Version ${NEW_VERSION} is available"
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

      - name: Build release
        run: cargo build --release --all-features

      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-test]
    if: needs.prepare.outputs.should_release == 'true'
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update version in Cargo.toml
        run: |
          PACKAGE_PATH="crates/${{ needs.prepare.outputs.package_name }}"
          NEW_VERSION="${{ needs.prepare.outputs.new_version }}"
          
          # Update version in package Cargo.toml
          sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" "${PACKAGE_PATH}/Cargo.toml"
          
          # Update Cargo.lock
          cargo update --package "${{ needs.prepare.outputs.package_name }}"
          
          echo "Updated version to ${NEW_VERSION}"

      - name: Generate changelog entry
        id: changelog
        run: |
          PACKAGE_NAME="${{ needs.prepare.outputs.package_name }}"
          CURRENT_VERSION="${{ needs.prepare.outputs.current_version }}"
          NEW_VERSION="${{ needs.prepare.outputs.new_version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | head -1 || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline "${LAST_TAG}..HEAD" --pretty=format:"- %s" || git log --oneline --pretty=format:"- %s")
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s")
          fi
          
          # Create changelog entry
          CHANGELOG_ENTRY="## [${NEW_VERSION}] - $(date +%Y-%m-%d)

### Changes
${COMMITS}
"
          
          echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release commit
        if: github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_NAME="${{ needs.prepare.outputs.package_name }}"
          NEW_VERSION="${{ needs.prepare.outputs.new_version }}"
          
          git add .
          git commit -m "chore(${PACKAGE_NAME}): release version ${NEW_VERSION}"
          
          # Create and push tag
          TAG_NAME="${PACKAGE_NAME}-v${NEW_VERSION}"
          git tag -a "${TAG_NAME}" -m "Release ${PACKAGE_NAME} v${NEW_VERSION}"
          
          git push origin main
          git push origin "${TAG_NAME}"

      - name: Publish to crates.io (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          PACKAGE_PATH="crates/${{ needs.prepare.outputs.package_name }}"
          cd "$PACKAGE_PATH"
          cargo publish --dry-run --allow-dirty

      - name: Publish to crates.io
        if: github.event.inputs.dry_run != 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          PACKAGE_PATH="crates/${{ needs.prepare.outputs.package_name }}"
          cd "$PACKAGE_PATH"
          cargo publish

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.package_name }}-v${{ needs.prepare.outputs.new_version }}
          release_name: ${{ needs.prepare.outputs.package_name }} v${{ needs.prepare.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog_entry }}
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.new_version, 'rc') }}

  notification:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-test, release]
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ needs.prepare.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare.outputs.current_version }} â†’ ${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "- **Action**: No actual release performed (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: Released to crates.io and GitHub" >> $GITHUB_STEP_SUMMARY
          fi
use logffi::{debug, define_errors, error, info, trace, warn};

#[test]
fn test_basic_macro_functionality() {
    // Test that our generated macros compile and work
    // These should not panic and should execute without errors
    error!("Test error message");
    warn!("Test warning message");
    info!("Test info message");
    debug!("Test debug message");
    trace!("Test trace message");
}

#[test]
fn test_macros_with_target() {
    // Test that macros work with explicit targets
    error!(target: "test_target", "Error with target");
    warn!(target: "test_target", "Warning with target");
    info!(target: "test_target", "Info with target");
    debug!(target: "test_target", "Debug with target");
    trace!(target: "test_target", "Trace with target");
}

#[test]
fn test_macros_with_formatting() {
    // Test that macros work with format arguments
    let value = 42;
    let name = "test";

    error!("Error value: {}", value);
    warn!("Warning with multiple: {} {}", value, name);
    info!("Info: {:?}", vec![1, 2, 3]);
    debug!("Debug: {value}", value = "test");
    trace!("Trace with multiple args: {} {} {}", 1, 2, 3);
}

#[test]
fn test_macros_with_target_and_formatting() {
    // Test combining target and formatting
    let id = 123;
    error!(target: "app::db", "Database error for user {}", id);
    warn!(target: "app::auth", "Login attempt failed for user: {}", id);
    info!(target: "app::server", "Server started on port: {}", 8080);
}

#[test]
fn test_all_log_levels_generated() {
    // Verify all 5 log levels were generated by meta-rust for_each! macro
    // This confirms our macro generation is working

    // Should not cause compilation errors - proves macros exist
    error!("macro test");
    warn!("macro test");
    info!("macro test");
    debug!("macro test");
    trace!("macro test");
}

#[test]
fn test_define_errors() {
    // Test define_errors! macro functionality
    define_errors! {
        pub enum TestError {
            #[error("Test error occurred")]
            TestFailed,
        }
    }

    // Test that we can create the error
    let error = TestError::TestFailed;

    // Test basic functionality
    assert_eq!(error.to_string(), "Test error occurred");
}

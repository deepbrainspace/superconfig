[package]
name = "superconfig"
version = "0.2.0"
authors = ["Nayeem Syed <hello@superconfig.dev>"]
categories = ["config", "development-tools"]
documentation = "https://docs.rs/superconfig"
edition = "2024"
homepage = "https://superconfig.dev"
keywords = ["config", "configuration", "settings", "env", "performance"]
license = "MIT"
readme = "../../README.md"
repository = "https://github.com/deepbrainspace/superconfig"
description = "High-performance configuration management with handle-based registry, zero-copy access, and multi-language support"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
default-theme = "ayu"

[features]
default = ["core"]

# Core features
core = []
providers = ["core"]

# Optional performance features
hot_reload = ["tokio", "notify"]
parallel = ["rayon"]
simd = ["simd-json"]
profiling = ["tracing"]
extended_formats = ["toml", "serde_yml"]

# Convenience feature for everything
all = ["providers", "hot_reload", "parallel", "simd", "profiling", "extended_formats"]

[dependencies]
# Core performance dependencies (always included)
dashmap = "7.0.0-rc2"
dirs = "6.0.0"
globset = "0.4.16"
memmap2 = "0.9.7"
parking_lot = "0.12.4"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = { version = "1.0.141", features = ["raw_value"] }
superconfig-macros = { path = "../superconfig-macros" }
thiserror = "2.0.12"

# Optional performance dependencies
notify = { version = "8.1.0", optional = true }
rayon = { version = "1.10.0", optional = true }
simd-json = { version = "0.15.1", optional = true }
tokio = { version = "1.47.0", features = ["full"], optional = true }
tracing = { version = "0.1.41", optional = true }

# Optional format parsing dependencies
serde_yml = { version = "0.0.12", optional = true }
toml = { version = "0.9.4", optional = true }

[dev-dependencies]
criterion = { version = "0.7.0", features = ["html_reports"] }
serial_test = "3.2.0"
tempfile = "3.15.0"
tokio-test = "0.4.4"

[[bench]]
name = "registry_bench"
harness = false

[lints.clippy]
# Performance-focused lints (with proper priorities)
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
# Allow large error types for rich error context
result_large_err = "allow"

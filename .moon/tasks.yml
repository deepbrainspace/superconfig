# Moon workspace-level task inheritance configuration
# Tasks defined here are inherited by all projects in the workspace
# Docs: https://moonrepo.dev/docs/config/tasks

fileGroups:
  sources: ["src/**/*"]
  tests: ["tests/**/*"]
  configs: ["Cargo.toml", "*.toml"]

tasks:
  # Standard formatting tasks
  fmt:
    command: "cargo fmt"
    inputs: ["@globs(sources)"]
    options:
      cache: false

  fmt-check:
    command: "cargo fmt --check"
    inputs: ["@globs(sources)"]

  # Standard linting
  clippy:
    command: "cargo clippy --all-features -- -D warnings"
    inputs: ["@globs(sources)", "@globs(configs)"]

  # Security and compliance tasks
  security-audit:
    command: "cargo audit"
    inputs: ["Cargo.lock"]
    options:
      cache: true

  deny:
    command: "cargo deny check"
    inputs: ["Cargo.lock"]
    options:
      cache: true

  # Coverage (requires tarpaulin)
  coverage:
    command: "cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml"
    options:
      cache: false

  # Additional maintenance tasks
  outdated:
    command: "cargo outdated"
    options:
      cache: false

  # Documentation with custom theme
  doc:
    command: "cargo doc --no-deps --all-features"
    inputs: ["@globs(sources)", "@globs(configs)"]
    env:
      RUSTDOCFLAGS: "--default-theme ayu"

  # Standard build and test tasks
  build:
    command: "cargo build"
    inputs: ["@globs(sources)", "@globs(configs)"]

  build-release:
    command: "cargo build --release"
    inputs: ["@globs(sources)", "@globs(configs)"]

  test:
    command: "cargo test --all-features"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]

  check:
    command: "cargo check --all-features"
    inputs: ["@globs(sources)", "@globs(configs)"]

  # Performance benchmarking
  bench:
    command: "cargo bench --all-features"
    inputs: ["@globs(sources)", "benches/**/*", "@globs(configs)"]
    options:
      cache: false

  bench-baseline:
    command: "cargo bench --all-features -- --save-baseline main"
    inputs: ["@globs(sources)", "benches/**/*", "@globs(configs)"]
    options:
      cache: false

  # Feature testing variations
  test-no-default:
    command: "cargo test --no-default-features"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    
  # Documentation with browser opening
  doc-open:
    command: "cargo doc --no-deps --all-features --open"
    deps: ["doc"]
    env:
      RUSTDOCFLAGS: "--default-theme ayu"
    options:
      cache: false

  # Git commit validation
  commit-msg-check:
    command: 'sh -c "if ! grep -qE \"^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .{1,50}\" \"$@\"; then echo \"‚ùå Commit message must follow conventional commits format:\"; echo \"   type(scope): description\"; echo \"   Example: feat(superffi): add naming conversion for WASM\"; exit 1; fi" --'
    options:
      cache: false

  # Publishing tasks
  publish-dry:
    command: "cargo publish --dry-run"
    inputs: ["@globs(sources)", "@globs(configs)"]
    deps: ["build-release", "test", "clippy", "fmt-check"]

  # Full release workflow with tagging
  publish:
    command: "../../.moon/scripts/publish.sh $project $VERSION"
    inputs: ["@globs(sources)", "@globs(configs)"]
    options:
      cache: false

  # Auto-publish without confirmation
  publish-auto:
    command: "../../.moon/scripts/publish.sh $project $VERSION --yes"
    inputs: ["@globs(sources)", "@globs(configs)"]
    options:
      cache: false

# Moon workspace-level task inheritance configuration
# Tasks defined here are inherited by all projects in the workspace
# Docs: https://moonrepo.dev/docs/config/tasks

fileGroups:
  sources: ["src/**/*"]
  tests: ["tests/**/*"]
  configs: ["Cargo.toml", "*.toml"]

tasks:
  # Standard formatting tasks
  format:
    command: "cargo fmt"
    inputs: ["@globs(sources)"]
    options:
      cache: false

  format-check:
    command: "cargo fmt --check"
    inputs: ["@globs(sources)"]

  # Standard linting
  lint:
    command: "cargo clippy --all-features -- -D warnings"
    inputs: ["@globs(sources)", "@globs(configs)"]

  # Security and compliance tasks
  security-audit:
    command: "cargo audit"
    inputs: ["Cargo.lock"]
    options:
      cache: true

  deny:
    command: "cargo deny check"
    inputs: ["Cargo.lock"]
    options:
      cache: true

  # Coverage using cargo-llvm-cov (replaces tarpaulin)
  coverage:
    command: "cargo llvm-cov --summary-only"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    options:
      cache: false
      outputStyle: "stream"

  # Branch coverage analysis (requires nightly)
  coverage-branch:
    command: "cargo +nightly llvm-cov --summary-only --branch --no-run"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    deps: ["test"]
    options:
      cache: false
      outputStyle: "stream"

  # HTML coverage report for browser viewing
  coverage-html:
    command: "cargo +nightly llvm-cov --html --branch --output-dir coverage"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    outputs: ["coverage/"]
    options:
      cache: false
      outputStyle: "stream"

  # Open HTML coverage report in browser (Linux/WSL compatible)
  coverage-open:
    command: "bash -c 'cargo +nightly llvm-cov --html --branch --output-dir coverage && wslview coverage/index.html'"
    deps: ["coverage-html"]
    options:
      cache: false

  # CI-friendly coverage with LCOV output
  coverage-ci:
    command: "cargo +nightly llvm-cov --lcov --branch --output-path coverage.lcov"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    outputs: ["coverage.lcov"]
    options:
      cache: false

  # Additional maintenance tasks
  outdated:
    command: "cargo outdated"
    options:
      cache: false

  # Documentation with custom theme
  doc:
    command: "cargo doc --no-deps --all-features"
    inputs: ["@globs(sources)", "@globs(configs)"]
    env:
      RUSTDOCFLAGS: "--default-theme ayu"

  # Standard build and test tasks
  build:
    command: "cargo build"
    inputs: ["@globs(sources)", "@globs(configs)"]

  build-release:
    command: "cargo build --release"
    inputs: ["@globs(sources)", "@globs(configs)"]


  # Test without coverage (for when you just want test results)
  test:
    command: "cargo test --all-features"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    options:
      cache: true
      outputStyle: "stream"

  check:
    command: "cargo check --all-features"
    inputs: ["@globs(sources)", "@globs(configs)"]

  # Performance benchmarking
  bench:
    command: "cargo bench --all-features"
    inputs: ["@globs(sources)", "benches/**/*", "@globs(configs)"]
    options:
      cache: false
      outputStyle: "stream"

  bench-compare:
    command: "cargo bench --all-features -- --baseline main"
    inputs: ["@globs(sources)", "benches/**/*", "@globs(configs)"]
    options:
      cache: true

  bench-save:
    command: "cargo bench --all-features -- --save-baseline main"
    inputs: ["@globs(sources)", "benches/**/*", "@globs(configs)"]
    options:
      cache: true

  # Feature testing variations
  test-no-default:
    command: "cargo test --no-default-features"
    inputs: ["@globs(sources)", "@globs(tests)", "@globs(configs)"]
    
  # Documentation with browser opening
  doc-open:
    command: "cargo doc --no-deps --all-features --open"
    deps: ["doc"]
    env:
      RUSTDOCFLAGS: "--default-theme ayu"
    options:
      cache: false

  # Git commit validation
  commit-msg-check:
    command: 'sh -c "if ! grep -qE \"^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .{1,50}\" \"$@\"; then echo \"‚ùå Commit message must follow conventional commits format:\"; echo \"   type(scope): description\"; echo \"   Example: feat(superffi): add naming conversion for WASM\"; exit 1; fi" --'
    options:
      cache: false

  # Publishing tasks
  publish-dry:
    command: "cargo publish --dry-run"
    inputs: ["@globs(sources)", "@globs(configs)"]
    deps: ["build-release", "test", "lint", "format-check"]

  # Full release workflow with tagging
  publish:
    command: "../../.moon/scripts/publish.sh $project $VERSION"
    inputs: ["@globs(sources)", "@globs(configs)"]
    options:
      cache: false

  # Auto-publish without confirmation
  publish-auto:
    command: "../../.moon/scripts/publish.sh $project $VERSION --yes"
    inputs: ["@globs(sources)", "@globs(configs)"]
    options:
      cache: false

  # Run all examples in the crate using enhanced cargo-examples
 # this will be implemented when we have the new structure ready and have this in cargotoolkit.
  # examples:
  #   command: "/home/nsm/code/deepbrain/cargo-examples/target/release/cargo-examples examples --manifest-path ./Cargo.toml --print"
  #   inputs: ["@globs(sources)", "examples/**/*", "@globs(configs)"]
  #   options:
  #     cache: false
  #     outputStyle: "stream"
